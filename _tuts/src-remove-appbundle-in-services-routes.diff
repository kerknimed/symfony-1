diff --git a/config/routes.yaml b/config/routes.yaml
index f7e6ee4..59b6ef6 100644
--- a/config/routes.yaml
+++ b/config/routes.yaml
@@ -1,8 +1,4 @@
-app:
-    resource: "../src/AppBundle/Controller/"
-    type:     annotation
-
 homepage:
     path: /
     defaults:
-        _controller: AppBundle\Controller\MainController::homepageAction
+        _controller: App\Controller\MainController::homepageAction
diff --git a/config/services.yaml b/config/services.yaml
index 9eae1ca..febf970 100644
--- a/config/services.yaml
+++ b/config/services.yaml
@@ -17,7 +17,7 @@ services:
     # this creates a service per class whose id is the fully-qualified class name
     App\:
         resource: '../src/*'
-        exclude: '../src/{Entity,Migrations,Tests,AppBundle}'
+        exclude: '../src/{Entity,Migrations,Tests}'
 
     # controllers are imported separately to make sure services can be injected
     # as action arguments even if you don't extend any base controller class
@@ -25,41 +25,29 @@ services:
         resource: '../src/Controller'
         tags: ['controller.service_arguments']
 
-    # REMOVE when AppBundle is removed
-    AppBundle\:
-        resource: '../src/AppBundle/*'
-        # you can exclude directories or files
-        # but if a service is unused, it's removed anyway
-        exclude: '../src/AppBundle/{Entity,Repository}'
-    AppBundle\Controller\:
-        resource: '../src/AppBundle/Controller'
-        public: true
-        tags: ['controller.service_arguments']
-    # END REMOVE
-
     # add more service definitions when explicit configuration is needed
     # please note that last definitions always *replace* previous ones
 
     Knp\Bundle\MarkdownBundle\MarkdownParserInterface: '@markdown.parser'
     Doctrine\ORM\EntityManager: '@doctrine.orm.default_entity_manager'
 
-    AppBundle\Service\MarkdownTransformer:
+    App\Service\MarkdownTransformer:
         arguments:
             $cacheDriver: '@doctrine_cache.providers.my_markdown_cache'
 
-    AppBundle\Doctrine\HashPasswordListener:
+    App\Doctrine\HashPasswordListener:
         tags: [doctrine.event_subscriber]
 
-    AppBundle\Form\TypeExtension\HelpFormExtension:
+    App\Form\TypeExtension\HelpFormExtension:
         tags:
             - { name: form.type_extension, extended_type: Symfony\Component\Form\Extension\Core\Type\FormType }
 
-    AppBundle\Service\MessageManager:
+    App\Service\MessageManager:
         arguments:
             - ['You can do it!', 'Dude, sweet!', 'Woot!']
             - ['We are *never* going to figure this out', 'Why even try again?', 'Facepalm']
 
-    AppBundle\EventSubscriber\AddNiceHeaderEventSubscriber:
+    App\EventSubscriber\AddNiceHeaderEventSubscriber:
         arguments:
             $showDiscouragingMessage: true
 
